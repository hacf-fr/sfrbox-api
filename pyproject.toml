[tool.poetry]
name = "sfrbox-api"
version = "0.0.11"
description = "SFR Box API"
authors = ["epenet", "HACF <contact@hacf.fr>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/hacf-fr/sfrbox-api"
repository = "https://github.com/hacf-fr/sfrbox-api"
documentation = "https://sfrbox-api.readthedocs.io"
keywords=["sfrbox", "router"]
classifiers = [
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Home Automation",
]

[tool.poetry.urls]
Changelog = "https://github.com/hacf-fr/sfrbox-api/releases"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
httpx = ">=0.23.1"
defusedxml = ">=0.7.1"
mashumaro = ">=3.13.1"
click = { version = ">=8.0.1", optional = true }

[tool.poetry.dev-dependencies]
Pygments = ">=2.10.0"
ruff = ">=0.3.7"
coverage = {extras = ["toml"], version = ">=6.2"}
darglint = ">=1.8.1"
furo = ">=2021.11.12"
mypy = "^1.6"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
pytest-asyncio = ">=0.20.2"
pytest-cov = ">=4.0.0"
pyupgrade = ">=2.29.1"
respx = ">=0.20.1"
safety = ">=1.10.3"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = {extras = ["colors"], version = ">=0.15.10"}
myst-parser = {version = ">=0.16.1"}

[tool.poetry.extras]
cli = ["click"]

[tool.poetry.scripts]
sfrbox-api = "sfrbox_api.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["sfrbox_api", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = 'defusedxml.*'
ignore_missing_imports = true

[tool.ruff]
line-length = 80
target-version = "py39"

[tool.ruff.lint]
ignore = [
    "A001",    # Variable is shadowing a Python builtin
    "A002",    # Argument is shadowing a Python builtin
    "C400",    # Unnecessary generator
    "E501",    # Line too long (81 > 80)
    "ERA001",  # Found commented-out code
    "N815",    # Variable in class scope should not be mixedCase
    "PLR2004", # Magic value used in comparison, consider replacing
    "PLR0911", # Too many return statements
    "PLR0913", # Too many arguments in function definition
    "PT001",   # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT018",   # Assertion should be broken down into multiple parts
    "PT022",   # No teardown in fixture `cli_runner`, use `return` instead of `yield`
    "PT023",   # Use `@pytest.mark.asyncio()` over `@pytest.mark.asyncio`
    "PLW0127", # Self-assignment of variable
]
select = [
    "A", #flake8-builtins
    "B", #flake8-bugbear
    "C4", #flake8-comprehensions
    "C90", #mccabe
    "E", #pycodestyle error
    "ERA", #eradicate
    "F", #Pyflakes
    "I", #isort
    "N", #pep8-naming
    "PL", #Pylint
    "PT", #flake8-pytest-style
]

[tool.ruff.lint.isort]
force-single-line = true
known-local-folder = [
    "renault_api",
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
